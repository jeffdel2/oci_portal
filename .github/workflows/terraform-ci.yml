name: Terraform CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  terraform-validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Terraform Init
      run: |
        if [ -d "terraform" ]; then
          cd terraform
          terraform init
        else
          echo "No terraform directory found"
        fi
    
    - name: Terraform Format Check
      run: |
        if [ -d "terraform" ]; then
          cd terraform
          terraform fmt -check -recursive
        else
          echo "No terraform directory found"
        fi
    
    - name: Terraform Validate
      run: |
        if [ -d "terraform" ]; then
          cd terraform
          terraform validate
        else
          echo "No terraform directory found"
        fi
    
    - name: Terraform Plan
      run: |
        if [ -d "terraform" ]; then
          cd terraform
          terraform plan -out=tfplan
        else
          echo "No terraform directory found"
        fi
      env:
        TF_VAR_okta_org_url: ${{ secrets.OKTA_ORG_URL }}
        TF_VAR_okta_api_token: ${{ secrets.OKTA_API_TOKEN }}
    
    - name: Check for Okta Provider Configuration
      run: |
        if [ -d "terraform" ]; then
          cd terraform
          if grep -r "okta" . --include="*.tf" --include="*.tfvars"; then
            echo "Okta provider configuration found"
          else
            echo "No Okta provider configuration found"
          fi
        else
          echo "No terraform directory found"
        fi

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
    
    - name: Install tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: terraform
    
    - name: Run tfsec
      run: |
        if [ -d "terraform" ]; then
          cd terraform
          tfsec --format sarif --out tfsec.sarif
        else
          echo "No terraform directory found"
        fi
    
    - name: Upload tfsec results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: terraform/tfsec.sarif

  okta-config-validation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Validate Okta Configuration
      run: |
        echo "Validating Okta configuration..."
        # Check for required Okta environment variables
        if [ -z "${{ secrets.OKTA_ORG_URL }}" ]; then
          echo "Warning: OKTA_ORG_URL not set"
        fi
        if [ -z "${{ secrets.OKTA_API_TOKEN }}" ]; then
          echo "Warning: OKTA_API_TOKEN not set"
        fi
        
        # Check for Okta configuration files
        if [ -f ".okta.env" ]; then
          echo "Found .okta.env file"
        fi
        
        # Validate Okta app configuration
        if [ -f "app.js" ]; then
          if grep -q "passport-openidconnect" app.js; then
            echo "Okta OpenID Connect configuration found in app.js"
          fi
        fi
    
    - name: Test Okta Connection
      run: |
        echo "Testing Okta connection..."
        # This would test the Okta configuration
        # curl -H "Authorization: SSWS ${{ secrets.OKTA_API_TOKEN }}" \
        #   "${{ secrets.OKTA_ORG_URL }}/api/v1/users/me" || echo "Okta connection test failed"

  application-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Test Application Startup
      run: |
        echo "Testing application startup with Okta configuration..."
        timeout 30s npm start || true
    
    - name: Check for Okta Environment Variables
      run: |
        echo "Checking for Okta environment variables..."
        if [ -f ".okta.env" ]; then
          echo "Found .okta.env file"
          # Don't display contents for security
        fi
        
        # Check for required variables in app.js
        if grep -q "ORG_URL\|CLIENT_ID\|CLIENT_SECRET" app.js; then
          echo "Okta environment variables referenced in app.js"
        fi 