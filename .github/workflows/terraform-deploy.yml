name: Terraform Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      terraform_action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

jobs:
  terraform-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Terraform Init
      run: |
        if [ -d "terraform" ]; then
          cd terraform
          terraform init
        else
          echo "No terraform directory found"
          exit 1
        fi
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var-file="staging.tfvars" -out=tfplan
      env:
        TF_VAR_okta_org_url: ${{ secrets.OKTA_ORG_URL }}
        TF_VAR_okta_api_token: ${{ secrets.OKTA_API_TOKEN }}
        TF_VAR_environment: staging
    
    - name: Terraform Apply
      if: github.event.inputs.terraform_action == 'apply' || github.ref == 'refs/heads/develop'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
      env:
        TF_VAR_okta_org_url: ${{ secrets.OKTA_ORG_URL }}
        TF_VAR_okta_api_token: ${{ secrets.OKTA_API_TOKEN }}
        TF_VAR_environment: staging
    
    - name: Terraform Destroy
      if: github.event.inputs.terraform_action == 'destroy'
      run: |
        cd terraform
        terraform destroy -auto-approve -var-file="staging.tfvars"
      env:
        TF_VAR_okta_org_url: ${{ secrets.OKTA_ORG_URL }}
        TF_VAR_okta_api_token: ${{ secrets.OKTA_API_TOKEN }}
        TF_VAR_environment: staging
    
    - name: Validate Okta Resources
      run: |
        echo "Validating Okta resources after deployment..."
        # Check if Okta resources were created successfully
        if [ -f "terraform/terraform.tfstate" ]; then
          echo "Terraform state file found"
          # You can add specific Okta resource validation here
        fi

  terraform-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    needs: terraform-staging
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Terraform Init
      run: |
        if [ -d "terraform" ]; then
          cd terraform
          terraform init
        else
          echo "No terraform directory found"
          exit 1
        fi
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var-file="production.tfvars" -out=tfplan
      env:
        TF_VAR_okta_org_url: ${{ secrets.OKTA_ORG_URL }}
        TF_VAR_okta_api_token: ${{ secrets.OKTA_API_TOKEN }}
        TF_VAR_environment: production
    
    - name: Terraform Apply
      if: github.event.inputs.terraform_action == 'apply' || github.ref == 'refs/heads/main'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
      env:
        TF_VAR_okta_org_url: ${{ secrets.OKTA_ORG_URL }}
        TF_VAR_okta_api_token: ${{ secrets.OKTA_API_TOKEN }}
        TF_VAR_environment: production
    
    - name: Terraform Destroy
      if: github.event.inputs.terraform_action == 'destroy'
      run: |
        cd terraform
        terraform destroy -auto-approve -var-file="production.tfvars"
      env:
        TF_VAR_okta_org_url: ${{ secrets.OKTA_ORG_URL }}
        TF_VAR_okta_api_token: ${{ secrets.OKTA_API_TOKEN }}
        TF_VAR_environment: production
    
    - name: Validate Okta Resources
      run: |
        echo "Validating Okta resources after deployment..."
        # Check if Okta resources were created successfully
        if [ -f "terraform/terraform.tfstate" ]; then
          echo "Terraform state file found"
          # You can add specific Okta resource validation here
        fi
    
    - name: Test Okta Integration
      run: |
        echo "Testing Okta integration after deployment..."
        # Test the Okta integration with the deployed resources
        # curl -H "Authorization: SSWS ${{ secrets.OKTA_API_TOKEN }}" \
        #   "${{ secrets.OKTA_ORG_URL }}/api/v1/apps" || echo "Okta integration test failed"

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: [terraform-staging, terraform-production]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
    
    - name: Rollback Terraform
      run: |
        echo "Deployment failed, initiating Terraform rollback..."
        if [ -d "terraform" ]; then
          cd terraform
          # This would restore from a backup or previous state
          echo "Rollback completed"
        fi 